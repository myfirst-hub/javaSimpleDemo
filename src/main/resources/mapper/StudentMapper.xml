<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.simpleDemo.mapper.StudentMapper">
    
    <resultMap id="StudentResultMap" type="com.example.simpleDemo.entity.Student">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="sex" column="sex"/>
        <result property="className" column="className"/>
        <result property="height" column="height"/>
        <result property="weight" column="weight"/>
        <result property="birthday" column="birthday"/>
        <result property="nativePlace" column="native_place"/>
        <result property="nationality" column="nationality"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>
    
    <select id="findAllStudents" resultMap="StudentResultMap">
        SELECT s.id, s.name, s.sex, s.height, s.weight, s.birthday, s.native_place, s.nationality, s.created_at, s.updated_at,
               GROUP_CONCAT(c.name separator '，') as className
        FROM students s
        LEFT JOIN class_student cs ON s.id = cs.student_id
        LEFT JOIN classes c ON cs.class_id = c.id
        GROUP BY s.id, s.name, s.sex, s.height, s.weight, s.birthday, s.native_place, s.nationality, s.created_at, s.updated_at
    </select>
    
    <select id="findStudents" resultMap="StudentResultMap" parameterType="map">
        SELECT s.id, s.name, s.sex, s.height, s.weight, s.birthday, s.native_place, s.nationality, s.created_at, s.updated_at,
               GROUP_CONCAT(c.name separator '，') as className
        FROM students s
        LEFT JOIN class_student cs ON s.id = cs.student_id
        LEFT JOIN classes c ON cs.class_id = c.id
        <where>
            <if test="name != null and name != ''">
                AND s.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="className != null and className != ''">
                AND s.className LIKE CONCAT('%', #{className}, '%')
            </if>
        </where>
        GROUP BY s.id, s.name, s.sex, s.height, s.weight, s.birthday, s.native_place, s.nationality, s.created_at, s.updated_at
        ORDER BY s.id
    </select>
    
    <insert id="insertStudent" parameterType="com.example.simpleDemo.entity.Student" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO students (name, sex, height, weight, birthday, native_place, nationality, created_at, updated_at)
        VALUES (#{name}, #{sex}, #{height}, #{weight}, #{birthday}, #{nativePlace}, #{nationality}, NOW(), NOW())
    </insert>
    
    <update id="updateStudent" parameterType="com.example.simpleDemo.entity.Student">
        UPDATE students
        <set>
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="sex != null and sex != ''">sex = #{sex},</if>
            <if test="className != null and className != ''">className = #{className},</if>
            <if test="height != null">height = #{height},</if>
            <if test="weight != null">weight = #{weight},</if>
            <if test="birthday != null">birthday = #{birthday},</if>
            <if test="nativePlace != null and nativePlace != ''">native_place = #{nativePlace},</if>
            <if test="nationality != null and nationality != ''">nationality = #{nationality},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id}
    </update>
    
    <select id="findStudentById" parameterType="long" resultMap="StudentResultMap">
        SELECT id, name, sex, height, weight, birthday, native_place, nationality, created_at, updated_at
        FROM students
        WHERE id = #{id}
    </select>
    
    <delete id="deleteStudentById" parameterType="long">
        DELETE FROM students WHERE id = #{id}
    </delete>

    <resultMap id="TheoryTestDetailResultMap" type="com.example.simpleDemo.dto.TheoryTestDetailResultDTO">
        <id property="id" column="id"/>
        <result property="testTime" column="test_time"/>
        <result property="testName" column="test_name"/>
        <result property="attributes" column="attributes"/>
        <result property="totalScore" column="total_score"/>
        <result property="studentName" column="student_name"/>
        <result property="className" column="class_name"/>
        <result property="teacherName" column="teacher_name"/>
        <result property="subjectName" column="subject_name"/>
        <result property="theoryTrainProgramName" column="theory_train_program_name"/>
    </resultMap>
    
    <select id="findTheoryTestDetailByStudentId" resultMap="TheoryTestDetailResultMap">
        SELECT 
            ttr.id, ttr.test_time, ttr.test_name, ttr.`attributes`, ttr.total_score, s.name as student_name,
            c.name as class_name, c.teacher_name, c.subject_name,
            ttp.name as theory_train_program_name
        FROM 
            theory_test_result ttr
        INNER JOIN 
            theory_test_map ttm ON ttr.id = ttm.theory_test_id
        INNER JOIN 
            students s ON ttm.student_id = s.id
        INNER JOIN
            theory_train_program ttp ON ttm.train_program_id = ttp.id
        INNER JOIN 
            class_student cs ON s.id = cs.student_id
        INNER JOIN 
            classes c ON cs.class_id = c.id and c.subject_id = ttm.subject_id
        <where>
            <if test="studentId != null">
                s.id = #{studentId}
            </if>
            <if test="studentName != null and studentName != ''">
                AND s.name LIKE CONCAT('%', #{studentName}, '%')
            </if>
            <if test="className != null and className != ''">
                AND c.name LIKE CONCAT('%', #{className}, '%')
            </if>
        </where>
        ORDER BY 
            ttr.id;
        </select>
</mapper>