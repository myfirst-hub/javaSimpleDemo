<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.simpleDemo.mapper.SubjectMapper">
    
    <resultMap id="SubjectResultMap" type="com.example.simpleDemo.entity.Subject">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="semester" column="semester"/>
        <result property="subjectDescribe" column="subject_describe"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <select id="findSubjects" resultMap="SubjectResultMap" parameterType="map">
        SELECT id, name, semester, subject_describe, created_at, updated_at 
        FROM subjects
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="semester != null and semester != ''">
                AND semester LIKE CONCAT('%', #{semester}, '%')
            </if>
        </where>
        ORDER BY id
    </select>

    <select id="findSubjectById" resultMap="SubjectResultMap" parameterType="long">
        SELECT id, name, semester, subject_describe, created_at, updated_at
        FROM subjects
        WHERE id = #{id}
    </select>

    <select id="findSubjectByStudentId" resultMap="SubjectResultMap" parameterType="map">
        select s.id, s.name from students stu
        inner join
        class_student cs on cs.student_id = stu.id
        inner join
        classes c on c.id = cs.class_id
        INNER JOIN
        teachers t on t.id = c.teacher_id
        inner JOIN
        subjects s on s.id = c.subject_id
        <where>
            <if test="studentId != null and studentId != ''">
                AND stu.id = #{studentId}
            </if>
            <if test="teacherId != null and teacherId != ''">
                AND t.id = #{teacherId}
            </if>
        </where>
    </select>

    <insert id="insertSubject" parameterType="com.example.simpleDemo.entity.Subject" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO subjects(name, semester, subject_describe)
        VALUES (#{name}, #{semester}, #{subjectDescribe})
    </insert>

    <update id="updateSubject" parameterType="com.example.simpleDemo.entity.Subject">
        UPDATE subjects
        SET name = #{name},
            semester = #{semester},
            subject_describe = #{subjectDescribe}
        WHERE id = #{id}
    </update>
    
    <delete id="deleteSubjectById">
        DELETE FROM subjects WHERE id = #{id}
    </delete>
    
    <!-- 根据科目查找班级，再通过班级查找学生信息 -->
    <resultMap id="ClassStudentInfoMap" type="com.example.simpleDemo.entity.Student">
        <id property="id" column="student_id"/>
        <result property="name" column="student_name"/>
        <result property="sex" column="sex"/>
        <result property="className" column="class_name"/>
        <result property="height" column="height"/>
        <result property="weight" column="weight"/>
        <result property="birthday" column="birthday"/>
        <result property="nativePlace" column="native_place"/>
        <result property="nationality" column="nationality"/>
        <result property="createdAt" column="student_created_at"/>
        <result property="updatedAt" column="student_updated_at"/>
    </resultMap>
    
    <select id="findClassesAndStudentsBySubjectId" parameterType="long" resultMap="ClassStudentInfoMap">
        SELECT 
            s.id as student_id,
            s.name as student_name,
            s.sex,
            s.className as class_name,
            s.height,
            s.weight,
            s.birthday,
            s.native_place,
            s.nationality,
            s.created_at as student_created_at,
            s.updated_at as student_updated_at,
            c.id as class_id,
            c.name as class_name,
            c.teacher_name
        FROM subjects sub
        INNER JOIN classes c ON sub.id = c.subject_id
        INNER JOIN class_student cs ON c.id = cs.class_id
        INNER JOIN students s ON cs.student_id = s.id
        WHERE sub.id = #{subjectId}
        ORDER BY c.id, s.id
    </select>
    
    <!-- 查询指定科目的训练次数和训练时间总和 -->
    <select id="findTrainInfoBySubjectId" parameterType="long" resultType="map">
        select COUNT(ttm.id) trainNum, SUM(ttp.train_time) trainTime
        from theory_test_map ttm
        left join theory_train_program ttp on ttm.subject_id = ttp.subject_id
        WHERE ttm.subject_id = #{subjectId}
    </select>

    <!-- 查询指定科目的训练次数和训练时间总和 -->
    <select id="findPracticeTrainInfoBySubjectId" parameterType="long" resultType="map">
        select COUNT(ttm.id) trainNum, SUM(ttp.train_time) trainTime
        from practice_test_map ttm
        left join practice_train_program ttp on ttm.subject_id = ttp.subject_id
        WHERE ttm.subject_id = #{subjectId}
    </select>

</mapper>