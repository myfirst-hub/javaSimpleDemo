<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.simpleDemo.mapper.ClassSubjectMapper">
    <resultMap id="ClassSubjectResultMap" type="com.example.simpleDemo.entity.ClassSubject">
        <id property="id" column="id"/>
        <result property="classId" column="class_id"/>
        <result property="subjectId" column="subject_id"/>
        <result property="createTime" column="create_time"/>
    </resultMap>
    
    <select id="findAll" resultMap="ClassSubjectResultMap">
        SELECT id, class_id, subject_id, create_time 
        FROM class_subject
    </select>
    
    <select id="findById" parameterType="long" resultMap="ClassSubjectResultMap">
        SELECT id, class_id, subject_id, create_time
        FROM class_subject
        WHERE id = #{id}
    </select>
    
    <select id="findByClassId" parameterType="long" resultMap="ClassSubjectResultMap">
        SELECT id, class_id, subject_id, create_time
        FROM class_subject
        WHERE class_id = #{classId}
    </select>
    
    <select id="findBySubjectId" parameterType="long" resultMap="ClassSubjectResultMap">
        SELECT id, class_id, subject_id, create_time
        FROM class_subject
        WHERE subject_id = #{subjectId}
    </select>
    
    <select id="findByClassIdAndSubjectId" parameterType="map" resultMap="ClassSubjectResultMap">
        SELECT id, class_id, subject_id, create_time
        FROM class_subject
        WHERE class_id = #{classId} AND subject_id = #{subjectId}
    </select>
    
    <insert id="insert" parameterType="com.example.simpleDemo.entity.ClassSubject" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO class_subject (class_id, subject_id)
        VALUES (#{classId}, #{subjectId})
    </insert>
    
    <update id="update" parameterType="com.example.simpleDemo.entity.ClassSubject">
        UPDATE class_subject
        <set>
            <if test="classId != null">class_id = #{classId},</if>
            <if test="subjectId != null">subject_id = #{subjectId},</if>
        </set>
        WHERE id = #{id}
    </update>
    
    <delete id="deleteById" parameterType="long">
        DELETE FROM class_subject WHERE id = #{id}
    </delete>
    
    <delete id="deleteByClassId" parameterType="long">
        DELETE FROM class_subject WHERE class_id = #{classId}
    </delete>
    
    <delete id="deleteBySubjectId" parameterType="long">
        DELETE FROM class_subject WHERE subject_id = #{subjectId}
    </delete>
    
    <delete id="deleteByClassIdAndSubjectId" parameterType="map">
        DELETE FROM class_subject WHERE class_id = #{classId} AND subject_id = #{subjectId}
    </delete>
</mapper>