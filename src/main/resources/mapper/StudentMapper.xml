<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.simpleDemo.mapper.StudentMapper">
    
    <resultMap id="StudentResultMap" type="com.example.simpleDemo.entity.Student">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="sex" column="sex"/>
        <result property="className" column="className"/>
        <result property="height" column="height"/>
        <result property="weight" column="weight"/>
        <result property="birthday" column="birthday"/>
        <result property="nativePlace" column="native_place"/>
        <result property="nationality" column="nationality"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>
    
    <select id="findAllStudents" resultMap="StudentResultMap">
        SELECT id, name, sex, className, height, weight, birthday, native_place, nationality, created_at, updated_at FROM students
    </select>
    
    <select id="findStudents" resultMap="StudentResultMap" parameterType="map">
        SELECT id, name, sex, className, height, weight, birthday, native_place, nationality, created_at, updated_at 
        FROM students
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="className != null and className != ''">
                AND className LIKE CONCAT('%', #{className}, '%')
            </if>
        </where>
        ORDER BY id
    </select>
    
    <insert id="insertStudent" parameterType="com.example.simpleDemo.entity.Student" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO students (name, sex, className, height, weight, birthday, native_place, nationality, created_at, updated_at)
        VALUES (#{name}, #{sex}, #{className}, #{height}, #{weight}, #{birthday}, #{nativePlace}, #{nationality}, NOW(), NOW())
    </insert>
    
    <update id="updateStudent" parameterType="com.example.simpleDemo.entity.Student">
        UPDATE students
        <set>
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="sex != null and sex != ''">sex = #{sex},</if>
            <if test="className != null and className != ''">className = #{className},</if>
            <if test="height != null">height = #{height},</if>
            <if test="weight != null">weight = #{weight},</if>
            <if test="birthday != null">birthday = #{birthday},</if>
            <if test="nativePlace != null and nativePlace != ''">native_place = #{nativePlace},</if>
            <if test="nationality != null and nationality != ''">nationality = #{nationality},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id}
    </update>
    
    <select id="findStudentById" parameterType="int" resultMap="StudentResultMap">
        SELECT id, name, sex, className, height, weight, birthday, native_place, nationality, created_at, updated_at
        FROM students
        WHERE id = #{id}
    </select>
    
    <delete id="deleteStudentById" parameterType="int">
        DELETE FROM students WHERE id = #{id}
    </delete>
</mapper>